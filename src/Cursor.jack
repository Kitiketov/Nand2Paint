class Cursor{
    static Vector position;
    static Array underCursor;
    static Vector prevPosition;

    function void init()
    {
        let prevPosition = Vector.new(-1, -1);
        let underCursor = Array.new(8);
        let position = Vector.new(16, 17);
        do DrawUI.drawCursor(position);
        return;
    }

    function void savePixelUnderCursor(){
        var int x, y, size;
        let x = position.getX();
        let y = position.getY();
        let size = PaintTools.getSize()-1;

        let underCursor[0] = Cursor.getColor(position.getX(), position.getY()-1);
        let underCursor[1] = Cursor.getColor(position.getX() + 1, position.getY());
        let underCursor[2] = Cursor.getColor(position.getX(), position.getY() + 1);
        let underCursor[3] = Cursor.getColor(position.getX() - 1, position.getY());

        let underCursor[4] = Cursor.getColor(position.getX(), position.getY() - 1 - size);
        let underCursor[5] = Cursor.getColor(position.getX() + 1 + size, position.getY());
        let underCursor[6] = Cursor.getColor(position.getX(), position.getY() + 1 + size);
        let underCursor[7] = Cursor.getColor(position.getX() - 1 - size, position.getY());
        return;
    }

    function bool getColor(int x, int y){
        var int registerAddress, bitMask, register, a, b, localPixelAddress;
        let a = (32 * y);
        let b = (x / 16);
        
        let localPixelAddress = -b * 16 + x ;
        let registerAddress = 16384 + a + b;
        let register = Memory.peek(registerAddress);

        if (localPixelAddress = 15 & register < 0){
            return true;
        }

        let bitMask = Main.binPow(2, localPixelAddress); 

        return ~((register & bitMask) = 0);
    }

    function void moveDirection(Vector direction){
        var int newX, newY;
        let newX = position.getX() + direction.getX();
        let newY = position.getY() + direction.getY();

        if (Cursor.isValidMoveDirection(newX, newY, PaintTools.getSize())){
            do DrawUI.cleanCursor(position);
            do DrawUI.loadPixelUnderCursor(position);
            let position = position.add(direction);
            do DrawUI.updatePosition();
            do Cursor.savePixelUnderCursor();
            do DrawUI.drawCursor(position);
        }

        do direction.dispose();
        return;
    }

    function bool isValidMoveDirection(int x, int y, int size){
        let size = size - 1;
        return ((x - size > 0) & (x+size < 511) & (y - size > 16) & (y + size < 238));
    }

    function  void savePosition(){
        do prevPosition.dispose();
        let prevPosition = Vector.new(position.getX(), position.getY());
        return;
    }

    function Vector getPosition(){
        return position;
    }

    function Vector getPrevPosition(){
        return prevPosition;
    }

    function Array getUnderCursor(){
        return underCursor;
    }

}
